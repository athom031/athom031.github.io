<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-25T18:12:06-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Alex Thomas</title><subtitle>A University of California, Riverside Honors Graduate with a B.S. in Computer Science (June 2020).
A team player with a passion for learning and developing new software. 
Let's get some work done.
</subtitle><entry><title type="html">User Location Visualization Tool</title><link href="http://localhost:4000/2020/07/05/User-Location-Visualization-Tool.html" rel="alternate" type="text/html" title="User Location Visualization Tool" /><published>2020-07-05T00:00:00-07:00</published><updated>2020-07-05T00:00:00-07:00</updated><id>http://localhost:4000/2020/07/05/User-Location-Visualization-Tool</id><content type="html" xml:base="http://localhost:4000/2020/07/05/User-Location-Visualization-Tool.html">&lt;h3 id=&quot;full-stack-web-application&quot;&gt;Full-Stack Web Application&lt;/h3&gt;

&lt;p&gt;A visual map of users for a client to see user whereabouts and activity. User side involves sleek Login and Registration tabs that then stores information in a MongoDB collection. Once logged in Users can change their information as well. With the Google Cloud API, the users coordinates are saved and displayed on the client side map.&lt;/p&gt;
&lt;h5 id=&quot;project-pipeline-back-end--nodejs-front-end--react-user-model--mongodb-google-cloud-apis&quot;&gt;Project Pipeline: Back End – NodeJS, Front End – React, User Model – MongoDB, Google Cloud APIs&lt;/h5&gt;

&lt;h1 id=&quot;demo-images&quot;&gt;Demo Images&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Interface to register users and save user data to mongoDB.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/UserLocationDemo/Register.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User Homepage where users can update their information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/UserLocationDemo/Login.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client application that visualizes user location and activity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/UserLocationDemo/Visualization.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-repo&quot;&gt;Github Repo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/UserRegLatLong&quot;&gt;Check It Out!&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;setup-instructions-included&quot;&gt;Setup Instructions Included&lt;/h5&gt;</content><author><name></name></author><summary type="html">Full-Stack Web Application</summary></entry><entry><title type="html">Krazy Kitchen</title><link href="http://localhost:4000/2020/06/11/Krazy-Kitchen.html" rel="alternate" type="text/html" title="Krazy Kitchen" /><published>2020-06-11T00:00:00-07:00</published><updated>2020-06-11T00:00:00-07:00</updated><id>http://localhost:4000/2020/06/11/Krazy-Kitchen</id><content type="html" xml:base="http://localhost:4000/2020/06/11/Krazy-Kitchen.html">&lt;h3 id=&quot;ucr-senior-design-project&quot;&gt;UCR Senior Design Project&lt;/h3&gt;

&lt;h4 id=&quot;video-demo&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=16-g_YCpumI&quot;&gt;Video Demo&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;Krazy Kitchen is an online cooperative game where a group of your friends attempt to complete several recipes under chaotic situations. This is our own implementation of the Overcooked game series. Space and time is limited and completing recipes are a combination of many different tasks and ingredients. This game requires users to get, cut, cook, combine and then deliver food. The true fun comes from the pandemonium that accompanies attempting levels individually and discovering through gameplay that the only way to succeed is to work together.&lt;/p&gt;

&lt;h2 id=&quot;built-with&quot;&gt;Built With&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Unity Enginer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version: &lt;a href=&quot;https://unity3d.com/unity/beta/2019.3.0b3&quot;&gt;2019.3.0 Beta 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Alex Thomas&lt;/strong&gt; - &lt;a href=&quot;https://github.com/athom031&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jose Garcia&lt;/strong&gt; - &lt;a href=&quot;https://github.com/LadyEbony&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Siqi Tian&lt;/strong&gt; - &lt;a href=&quot;https://github.com/SiqiT&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Max McKee&lt;/strong&gt; - &lt;a href=&quot;https://github.com/mmckee003&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chong Zuo&lt;/strong&gt; - &lt;a href=&quot;https://github.com/ChongZuo&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;game-description&quot;&gt;Game Description&lt;/h2&gt;

&lt;h3 id=&quot;level-components&quot;&gt;Level Components&lt;/h3&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/plates.png&quot; width=&quot;50%&quot; /&gt; &lt;br /&gt;
Cutting boards are where players can prepare specific ingredients for specific recipes. &lt;br /&gt;And the plates are what meals are served on.
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/trashcan.png&quot; width=&quot;30%&quot; /&gt; &lt;br /&gt;
Cabinets with an exclamation point over it serve as garbage cans. Putting anything on these cabinets will kill the object, allowing you to clean up your kitchen before it gets too much in disarray.
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/cookingpot.png&quot; width=&quot;40%&quot; /&gt; &lt;br /&gt;
Stove tops allow our chefs to cook the needed ingredients to complete their recipes. Keeping ingredients too long will cause the food to become charred and no longer servable, so watch your food!
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/ingredients.png&quot; width=&quot;40%&quot; /&gt; &lt;br /&gt;
Ingredients are available in this design on top of item spawning cabinets. There is no limit to how many ingredients can be spawned. Try not to drown in fish!
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/timer.png&quot; width=&quot;30%&quot; /&gt; &lt;br /&gt;
A timer is available on every level to show how much time is left to complete recipes. This is independent of what recipe tasks are being given to the player and instead is dependent on the level itself. Completing the required number of recipes in the level time serves as beating the level.
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/recipes.png&quot; width=&quot;40%&quot; /&gt; &lt;br /&gt;
In the top left corner all of the tasks are located for the players with its specific recipe. Plating and delivering a meal will delete the task and update your score in the bottom left corner.
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/delivery.png&quot; width=&quot;40%&quot; /&gt; &lt;br /&gt;
These special cabinets are where we can deliver play-created meals. Once plated food is put on these cabinets, they are checked to see if the recipe has been met and then the score is incremented.
&lt;br /&gt;&lt;br /&gt;

&lt;/div&gt;

&lt;h3 id=&quot;levels&quot;&gt;Levels&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/level1.png&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-1&quot;&gt;Level 1&lt;/h4&gt;
&lt;p&gt;In our first level we stress the importance of working together right off the bat. Players spawn in one of the two areas. If you are in the top section, you are only able to spawn and cut ingredients. These prepared ingredients can be put on the middle island section to be picked up by players in the bottom section. If you are in the bottom section, you can get the prepared ingredients, cook and plate them accordingly. The delivery of recipes are in the bottom section as well.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/level2.png&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-2&quot;&gt;Level 2&lt;/h4&gt;
&lt;p&gt;In our second level we open tasks up to the players’ discretion. Through the small window in the cabinets, players can switch sides. It is important to note that ingredients are on top and the cutting board is on the bottom. This level involves a lot of transferring ingredients back and forth to complete a recipe. So although now a player can individually complete recipes, working together will still allow the most efficient system. 
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/level3.png&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-3&quot;&gt;Level 3&lt;/h4&gt;
&lt;p&gt;This level can prove to be the most frustrating without communication. Players can be clogged up in this claustrophobic environment and cannot rely on cabinet island transfers unlike before. The suggested gameplay for this level is to keep movement constant among teammates in a same circular direction. If players were to move clockwise, there will be no traffic congestion.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/level4.png&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-4&quot;&gt;Level 4&lt;/h4&gt;
&lt;p&gt;In the final level of the game, players must test their abilities learned in the previous labels. Players must move within the tight channel to get ingredients to the other side. The throw feature can be used to great effect in this level.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;characters&quot;&gt;Characters&lt;/h3&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/player.png&quot; width=&quot;30%&quot; /&gt; 
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
When the game starts, each user is assigned the same character model. Depending on the order they connect to the server, their model will be a different color. There is no ability or task difference in the player model. Users can move their characters around and grab/drop an item. Users can also throw an item to other users in order to save more time.&lt;/p&gt;

&lt;h3 id=&quot;gameplay&quot;&gt;Gameplay&lt;/h3&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/controls.png&quot; width=&quot;70%&quot; /&gt; 
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
After all the players join the game, the game starts. Players have to cook meals based on the recipe to get corresponding points. &lt;br /&gt;
Users can use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;W, A, S, D to control the character&lt;/li&gt;
  &lt;li&gt;E to grab and drop items&lt;/li&gt;
  &lt;li&gt;F to throw items.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Game Engine&lt;/strong&gt; - Unity&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version: &lt;a href=&quot;https://unity3d.com/unity/beta/2019.3.0b3&quot;&gt;2019.3.0 Beta 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Networking Framework&lt;/strong&gt; - Photon&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.photonengine.com/pun&quot;&gt;Photon&lt;/a&gt; &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Necessary Scripts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.EntityManager.html&quot;&gt;UnitEntityManager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/540/Documentation/ScriptReference/UI.Selectable-interactable.html&quot;&gt;Interactable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration:&lt;/h2&gt;
&lt;p&gt;Overcooked - chaotic couch co-op cooking game&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://store.steampowered.com/app/448510/Overcooked/&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">UCR Senior Design Project</summary></entry><entry><title type="html">Embedded Systems</title><link href="http://localhost:4000/2020/06/10/Embedded-Systems.html" rel="alternate" type="text/html" title="Embedded Systems" /><published>2020-06-10T00:00:00-07:00</published><updated>2020-06-10T00:00:00-07:00</updated><id>http://localhost:4000/2020/06/10/Embedded-Systems</id><content type="html" xml:base="http://localhost:4000/2020/06/10/Embedded-Systems.html">&lt;h1 id=&quot;embedded-systems&quot;&gt;Embedded Systems&lt;/h1&gt;

&lt;p&gt;A collection of projects completed in CS120B - Embedded Systems &lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;ucr-spring-2020&quot;&gt;(UCR Spring 2020).&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems&quot;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;projects&quot;&gt;Projects&lt;/h2&gt;
&lt;!--                    TABLE OF CONTENTS                                   --&gt;
&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;
&lt;div style=&quot;display:flex; flex-direction:column;&quot;&gt;    
    &lt;html&gt;
        &lt;a href=&quot;#lcd&quot;&gt;Final Project: LCD Racer&lt;/a&gt;
        &lt;a href=&quot;#lab11&quot;&gt;Lab 11: Task Scheduler&lt;/a&gt;
        &lt;a href=&quot;#lab10&quot;&gt;Lab 10: Concurrent synchSMs&lt;/a&gt;
        &lt;a href=&quot;#lab9&quot;&gt;Lab 9: PWM (Music Player)&lt;/a&gt;
        &lt;a href=&quot;#lab8&quot;&gt;Lab 8: ADC&lt;/a&gt;
        &lt;a href=&quot;#lab7&quot;&gt;Lab 7: LCD Screen&lt;/a&gt;
        &lt;a href=&quot;#lab6&quot;&gt;Lab 6: synchSMs&lt;/a&gt;
        &lt;a href=&quot;#lab5&quot;&gt;Lab 5: ATMega1284 Microcontroller Intro&lt;/a&gt;
        &lt;a href=&quot;#lab4&quot;&gt;Lab 4: State Machines&lt;/a&gt;
        &lt;a href=&quot;#lab3&quot;&gt;Lab 3: Bit Manipulation&lt;/a&gt;
        &lt;a href=&quot;#lab2&quot;&gt;Lab 2: AVR Toolchain Intro&lt;/a&gt;
    &lt;/html&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--                           PROJECTS                                      --&gt;
&lt;div id=&quot;lcd&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;final-project-lcd-racer&quot;&gt;Final Project: LCD Racer&lt;/h3&gt;

&lt;h4 id=&quot;lcd-racing-game-&quot;&gt;LCD racing game. &lt;br /&gt;&lt;/h4&gt;

&lt;p&gt;Help player Smee (&amp;gt;) avoid the obstacles that ever increase in speed. &lt;br /&gt;
Try and beat your high score!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/kZFsC9rSBdo&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/LCDRacer&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab11&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-11-task-scheduler&quot;&gt;Lab 11: Task Scheduler&lt;/h3&gt;

&lt;h4 id=&quot;part-1&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;Code the keypad to be a SM task and implements a task scheduler to output the ASCII code for the character being pressed.&lt;/p&gt;
&lt;h4 id=&quot;part-2&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;Display the message “CS120 is Legend… wait for it DARY!”. &lt;br /&gt;
The string does not fit on the display all at once, so the display scrolls through the text.&lt;/p&gt;
&lt;h4 id=&quot;part-3&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;Implement a task scheduler to print the character last pressed.&lt;/p&gt;
&lt;h4 id=&quot;part-4&quot;&gt;Part 4&lt;/h4&gt;
&lt;p&gt;Have a string displayed that takes up the display and implement a task scheduler to iterate through the display index and output user characters over the string.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/onJCacxnShQ&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab11&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab10&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-10-concurrent-synchsms&quot;&gt;Lab 10: Concurrent synchSMs&lt;/h3&gt;

&lt;h4 id=&quot;part-1-1&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;A concurrent SM that runs a SM for threeLDs to alternate each second and another SM blink a fourth light.&lt;/p&gt;
&lt;h4 id=&quot;part-2-1&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;An edited concurrent SM from the one above that “appears” to opperate on different periods.&lt;/p&gt;
&lt;h4 id=&quot;part-3-1&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;An edited concurrent SM from the one above that now includes a speaker to be toggled every 2 ms.&lt;/p&gt;
&lt;h4 id=&quot;part-4-1&quot;&gt;Part 4&lt;/h4&gt;
&lt;p&gt;Includes user input to change what frequency the speaker outputs audio.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/swwiqgo0ODQ&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab10&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab9&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-9-pwm-music-player&quot;&gt;Lab 9: PWM (Music Player)&lt;/h3&gt;

&lt;h4 id=&quot;part-1-2&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;With the PWM functionality, a designed system uses three buttons to play three different tones on a speaker.&lt;/p&gt;
&lt;h4 id=&quot;part-2-2&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;A SM that uses PWM functionality to scale through the C scale.&lt;/p&gt;
&lt;h4 id=&quot;part-3-2&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;A SM that uses PWM functionality to play Kal Ho Na Ho theme.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/0He5l6V-2h0&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab9&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab8&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-8-adc&quot;&gt;Lab 8: ADC&lt;/h3&gt;

&lt;h4 id=&quot;part-1-3&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;A system that reads the 10-bit ADC result from a potentiometer and displays it on a LED array.&lt;/p&gt;
&lt;h4 id=&quot;part-2-3&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;A system that replaces the potentiometer with a photoresistor and displays it on a LED array.&lt;/p&gt;
&lt;h4 id=&quot;part-3-3&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;A system that uses max and min results from previous lab to then only illuminate LED when enough light is detected on the photo resistor.&lt;/p&gt;
&lt;h4 id=&quot;part-4-2&quot;&gt;Part 4&lt;/h4&gt;
&lt;p&gt;A system, using a bank of eight LEDs, where the number of LEDs illuminated is a representation of how much light is detected.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/WifXfBjOIZE&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab8&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab7&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-7-lcd-screen&quot;&gt;Lab 7: LCD Screen&lt;/h3&gt;

&lt;h4 id=&quot;part-1-4&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;Output a number that can be incremented or decremented with a button press.&lt;/p&gt;
&lt;h4 id=&quot;part-2-4&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;Cycling LED array cycle game, where score is incrememnted when the button is pressed and the middle light is illuminated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/7MUxzIRRO7U&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab7&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab6&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-6-synchsms&quot;&gt;Lab 6: synchSMs&lt;/h3&gt;

&lt;h4 id=&quot;part-1-5&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;A syncSM that blinks three LEDs in increasing and decreasing order, 1 second each.&lt;/p&gt;
&lt;h4 id=&quot;part-2-5&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;A simple light game that requires pressing a button when the middle light is illuminated. Pressing the light again restarts the game.&lt;/p&gt;
&lt;h4 id=&quot;part-3-4&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;LEDs represents bit # representation. Pressing one button increases the #, presssing another decreases the #.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/5JkeYeg2FGo&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab6&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab5&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-5-atmega1284-microcontroller-intro&quot;&gt;Lab 5: ATMega1284 Microcontroller Intro&lt;/h3&gt;

&lt;h4 id=&quot;part-1-6&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;Based on the fuel tank given as input, have the lights warn what the fuel level is.&lt;/p&gt;
&lt;h4 id=&quot;part-2-6&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;Increment or decrement output with button presses.&lt;/p&gt;
&lt;h4 id=&quot;part-3-5&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;A festive light display.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/xjrFZ647MQU&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab5&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab4&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-4-state-machines&quot;&gt;Lab 4: State Machines&lt;/h3&gt;

&lt;h4 id=&quot;part-1-7&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;Implemented on button and off button for an LED.&lt;/p&gt;
&lt;h4 id=&quot;part-2-7&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;Increment or decrement output based on button press.&lt;/p&gt;
&lt;h4 id=&quot;part-3-6&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;Digital combination deadbolt lock system for garage doorway.&lt;/p&gt;
&lt;h4 id=&quot;part-4-3&quot;&gt;Part 4&lt;/h4&gt;
&lt;p&gt;Extended dedadbolt where entering the lock key again will then lock the unlocked door.&lt;/p&gt;
&lt;h4 id=&quot;part-5&quot;&gt;Part 5&lt;/h4&gt;
&lt;p&gt;Further extended deadbolt that requires a 4-button sequence rather than 2-button sequence. This SM is instead represented with an array rather than a state for each button press.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab4&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab3&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-3-bit-manipulation&quot;&gt;Lab 3: Bit Manipulation&lt;/h3&gt;

&lt;h4 id=&quot;part-1-8&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;Output the number of the number of 1’s on two input ports.&lt;/p&gt;
&lt;h4 id=&quot;part-2-8&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;Output fuel level based on fuel tank count.&lt;/p&gt;
&lt;h4 id=&quot;part-3-7&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;Extend fuel level output to flash light if seatbelt is not fastened and driver is seated.&lt;/p&gt;
&lt;h4 id=&quot;part-4-4&quot;&gt;Part 4&lt;/h4&gt;
&lt;p&gt;Take the upper nibble of PINA and map it to the lower nibble of PORTB and vice versa.&lt;/p&gt;
&lt;h4 id=&quot;part-5-1&quot;&gt;Part 5&lt;/h4&gt;
&lt;p&gt;Based on driver seat weight, siginfy whether or not the airbag is abled.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab3&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab2&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;lab-2-avr-toolchain-intro&quot;&gt;Lab 2: AVR Toolchain Intro&lt;/h3&gt;

&lt;h4 id=&quot;part-1-9&quot;&gt;Part 1&lt;/h4&gt;
&lt;p&gt;Illuminate an LED if the garage door is open at night.&lt;/p&gt;
&lt;h4 id=&quot;part-2-9&quot;&gt;Part 2&lt;/h4&gt;
&lt;p&gt;Output the number of available parking spaces in a parking garage.&lt;/p&gt;
&lt;h4 id=&quot;part-3-8&quot;&gt;Part 3&lt;/h4&gt;
&lt;p&gt;Extended available parking for a warning if parking lot is full.&lt;/p&gt;
&lt;h4 id=&quot;part-4-5&quot;&gt;Part 4&lt;/h4&gt;
&lt;p&gt;Weight sensor for amusement park ride with three seats that insures the weight is balanced.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/Lab2&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Embedded Systems</summary></entry><entry><title type="html">Audio Signal Processing</title><link href="http://localhost:4000/2019/09/03/Audio-Signal-Processing.html" rel="alternate" type="text/html" title="Audio Signal Processing" /><published>2019-09-03T00:00:00-07:00</published><updated>2019-09-03T00:00:00-07:00</updated><id>http://localhost:4000/2019/09/03/Audio-Signal-Processing</id><content type="html" xml:base="http://localhost:4000/2019/09/03/Audio-Signal-Processing.html">&lt;p&gt;An exploration of the audio space inspired by the knowledge gained and experience from my Internship with Knowles Intelligent Audio.&lt;/p&gt;

&lt;h2 id=&quot;split-script&quot;&gt;Split Script&lt;/h2&gt;

&lt;p&gt;Voice to command technology has become ever more present in today’s devices. To test this technology, keyword utterances are required.&lt;/p&gt;

&lt;p&gt;In my Knowles Data Collection project I organized for 30 subjects to come into the lab and record 10 instances of 9 different keywords.&lt;/p&gt;

&lt;p&gt;(A key word example: “Hey Siri, what’s the weather like today”.)&lt;/p&gt;

&lt;p&gt;This audio is saved as the total file but each utterance is required to be split and saved in the proper database collection. This base split script is used to take in an audio file and find the utterances. Later naming conventions and ordering was used to determine which keyword it is and where to send it in the database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/AudioSignal/SplitScript.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I saw an opportunity to optimize company scripts and made my own script which had a speedup due to cancelling redundant calculations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/SplitScript&quot;&gt;Project Repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;audio-cutter&quot;&gt;Audio Cutter&lt;/h2&gt;

&lt;p&gt;During my internship this became a small passion project. 
Often times in music I enjoy, there are annoying segments whether it be instrumental or a undesired verse that irks the music listening process.&lt;/p&gt;

&lt;p&gt;Trimming off the beginning and ending of a song is easy on iTunes but to cut out a middle section of a song causes a lot more hardship. Instead of opening up GarageBand and hand trimming the audio, concatenating them, and then exporting the audio, this python desktop application does it for you based on timestamps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/AudioSignal/AudioCutter.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/AudioCutter&quot;&gt;Project Repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;trim-silence&quot;&gt;Trim Silence&lt;/h2&gt;

&lt;p&gt;After my internship I wondered how I could apply the split script methodologies to my life.
Being a person passionate about collecting music, I found that a lot of audio have different levels and that downloaded music has awkward dips and pauses from the song.&lt;/p&gt;

&lt;p&gt;This script trims off silence automatically and chooses which “utterance” to export based on length.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/AudioSignal/TrimSilence.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/TrimSilence&quot;&gt;Project Repo&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">An exploration of the audio space inspired by the knowledge gained and experience from my Internship with Knowles Intelligent Audio.</summary></entry><entry><title type="html">Box Bot - Bluetooth RC</title><link href="http://localhost:4000/2017/11/12/Bluetooth-RC.html" rel="alternate" type="text/html" title="Box Bot - Bluetooth RC" /><published>2017-11-12T00:00:00-08:00</published><updated>2017-11-12T00:00:00-08:00</updated><id>http://localhost:4000/2017/11/12/Bluetooth-RC</id><content type="html" xml:base="http://localhost:4000/2017/11/12/Bluetooth-RC.html">&lt;h4 id=&quot;ucr-hackathon-submission&quot;&gt;UCR Hackathon Submission&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/BoxBot/BoxBot.JPG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My team consisted of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Melissa Do&lt;/li&gt;
  &lt;li&gt;Emma Rivera&lt;/li&gt;
  &lt;li&gt;Cindy Quach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We used the Arduino IDE to build a motorized car that was controlled by personal Android application.&lt;/p&gt;

&lt;p&gt;From this project, we learned how to program using the Arduino IDE, build simple circuits, the difference between digital and analog signals, and how to solder wires onto our LED lights.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devpost.com/software/box-bot&quot;&gt;Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/BoxBot/Award.JPG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other than Melissa, the rest of the team had never been to a Hackathon before nor had prior experience with working with hardware. So we approached this opportunity with the goal of learning how to step out of our comfort zones and into the engineering world. Considering our experience with hardware, we achieved something great by being awarded the Best Hardware Hack!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;img src=&quot;http://localhost:4000/assets/Files/BoxBot/BoxBot.gif&quot; /&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">UCR Hackathon Submission</summary></entry></feed>