<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-09-10T17:45:44-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Alex Thomas</title><subtitle>A University of California, Riverside Honors Graduate with a B.S. in Computer Science (June 2020).
A team player with a passion for learning and developing new software.
Let's get some work done.
</subtitle><entry><title type="html">Twitter Search Engine: Full Stack Web Application</title><link href="http://localhost:4000/2020/09/04/Twitter-Search-Engine.html" rel="alternate" type="text/html" title="Twitter Search Engine: Full Stack Web Application" /><published>2020-09-04T00:00:00-07:00</published><updated>2020-09-04T00:00:00-07:00</updated><id>http://localhost:4000/2020/09/04/Twitter-Search-Engine</id><content type="html" xml:base="http://localhost:4000/2020/09/04/Twitter-Search-Engine.html">&lt;p&gt;A search engine for crawled tweet data. With a Lucene Index, this search engine has the ability to search millions of tweets and return the most recent and relevant results based on a user query.&lt;/p&gt;

&lt;h5 id=&quot;project-pipeline-back-end--spring-front-end--react-twitter-dev-api-twitter-4j&quot;&gt;Project Pipeline: Back End – Spring, Front End – React, Twitter Dev API, Twitter 4j&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/TwitterSearch/front_end_search.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;crawl-and-indexing&quot;&gt;Crawl and Indexing&lt;/h2&gt;

&lt;h3 id=&quot;crawl&quot;&gt;Crawl&lt;/h3&gt;

&lt;p&gt;To crawl twitter, a connection to the Twitter API using a Twitter 4j object and developer keys was made, opening up a stream of tweets. For the tweets, there are two explicit parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tweets tagged with “English” language&lt;/li&gt;
  &lt;li&gt;GPS bounding box for the United States of America&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example crawled tweets are located &lt;a href=&quot;https://github.com/athom031/TwitterCrawlAndSearch/tree/master/crawl_index/data-sample&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially, crawled data also included:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Datetime&lt;/li&gt;
  &lt;li&gt;Geolocation (Latitude, Longitude)&lt;/li&gt;
  &lt;li&gt;User&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But embedding tweets in front-end application only needed the unique Tweet ID.&amp;lt;/br&amp;gt;
Text and timestamp is kept as parameters for the actual search feature.&lt;/p&gt;

&lt;h3 id=&quot;indexing&quot;&gt;Indexing&lt;/h3&gt;

&lt;p&gt;The index structure generated uses the Lucene library object IndexWriter. The index is built by loading all of the .JSON objects in the .JSON line formatted files into memory which are then parsed to create documents for the lucene index.&lt;/p&gt;

&lt;p&gt;When a .JSON object (a Tweet) is parsed, the text of the Tweet is stored as a TextField in the index’s document. This is the baseline used when searching the index later. The ID is not used in the tweet itself but is primarily used when representing the tweet on the front end. The timestamp of the Tweet is stored twice: once as a NumericDocValuesField (used for search score boosting) and once as a LongPoint (for drill down serach functionality).&lt;/p&gt;

&lt;h2 id=&quot;web-application&quot;&gt;Web Application&lt;/h2&gt;

&lt;h3 id=&quot;back-end&quot;&gt;Back End&lt;/h3&gt;

&lt;p&gt;The LuceneBuilder Class was manipulated to fit the contraints of the Spring framework to create a working backend for search queries. But the default Spring framework proved erraneous due to the front end and back end being on local host in development. This meant that cross origin request errors were not linking the front end and backend properly. Therefore a more specialized &lt;a href=&quot;https://spring.io/guides/gs/rest-service-cors/&quot;&gt;framework&lt;/a&gt; was used.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/TwitterSearch/back_end.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;front-end&quot;&gt;Front End&lt;/h3&gt;

&lt;p&gt;The react twitter embed &lt;a href=&quot;https://www.npmjs.com/package/react-twitter-embed&quot;&gt;component&lt;/a&gt; made displaying the relevant tweets quite easy. The only difficulty was that the entire project, initially, was collecting different tweet data. So the Twitter Crawl and Index had to be changed accordingly.&lt;/p&gt;

&lt;p&gt;The website changes based on the current state of the App class (depending on whether or not a user has entered a query). Once the query is submitted, it calls the front end to get the ID’s of the 10 most relevant tweets, and uses the embed component to display the tweets in a familiar way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/TwitterSearch/front_end_result.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-repo&quot;&gt;Github Repo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/TwitterCrawlAndSearch&quot;&gt;Check It Out!&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;setup-instructions-included&quot;&gt;Setup Instructions Included&lt;/h5&gt;</content><author><name></name></author><summary type="html">A search engine for crawled tweet data. With a Lucene Index, this search engine has the ability to search millions of tweets and return the most recent and relevant results based on a user query.</summary></entry><entry><title type="html">User Location Visualization Tool: Full Stack Web Application</title><link href="http://localhost:4000/2020/07/05/User-Location-Visualization-Tool.html" rel="alternate" type="text/html" title="User Location Visualization Tool: Full Stack Web Application" /><published>2020-07-05T00:00:00-07:00</published><updated>2020-07-05T00:00:00-07:00</updated><id>http://localhost:4000/2020/07/05/User-Location-Visualization-Tool</id><content type="html" xml:base="http://localhost:4000/2020/07/05/User-Location-Visualization-Tool.html">&lt;p&gt;A visual map of users for a client to see user whereabouts and activity. User side involves sleek Login and Registration tabs that then stores information in a MongoDB collection. Once logged in Users can change their information as well. With the Google Cloud API, the users coordinates are saved and displayed on the client side map.&lt;/p&gt;
&lt;h5 id=&quot;project-pipeline-back-end--nodejs-front-end--react-user-model--mongodb-google-cloud-apis&quot;&gt;Project Pipeline: Back End – NodeJS, Front End – React, User Model – MongoDB, Google Cloud APIs&lt;/h5&gt;

&lt;h1 id=&quot;demo-images&quot;&gt;Demo Images&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Interface to register users and save user data to mongoDB.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/UserLocationDemo/Register.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User Homepage where users can update their information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/UserLocationDemo/Login.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client application that visualizes user location and activity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/UserLocationDemo/Visualization.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-repo&quot;&gt;Github Repo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/UserRegLatLong&quot;&gt;Check It Out!&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;setup-instructions-included&quot;&gt;Setup Instructions Included&lt;/h5&gt;</content><author><name></name></author><summary type="html">A visual map of users for a client to see user whereabouts and activity. User side involves sleek Login and Registration tabs that then stores information in a MongoDB collection. Once logged in Users can change their information as well. With the Google Cloud API, the users coordinates are saved and displayed on the client side map. Project Pipeline: Back End – NodeJS, Front End – React, User Model – MongoDB, Google Cloud APIs</summary></entry><entry><title type="html">Krazy Kitchen: Unity Engine Video Game</title><link href="http://localhost:4000/2020/06/11/Krazy-Kitchen.html" rel="alternate" type="text/html" title="Krazy Kitchen: Unity Engine Video Game" /><published>2020-06-11T00:00:00-07:00</published><updated>2020-06-11T00:00:00-07:00</updated><id>http://localhost:4000/2020/06/11/Krazy-Kitchen</id><content type="html" xml:base="http://localhost:4000/2020/06/11/Krazy-Kitchen.html">&lt;h3 id=&quot;ucr-senior-design-project&quot;&gt;UCR Senior Design Project&lt;/h3&gt;

&lt;h4 id=&quot;video-demo&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=16-g_YCpumI&quot;&gt;Video Demo&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;github-repository&quot;&gt;&lt;a href=&quot;https://github.com/athom031/KrazyKitchen&quot;&gt;Github Repository&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;Krazy Kitchen is an online cooperative game where a group of your friends attempt to complete several recipes under chaotic situations. This is our own implementation of the Overcooked game series. Space and time is limited and completing recipes are a combination of many different tasks and ingredients. This game requires users to get, cut, cook, combine and then deliver food. The true fun comes from the pandemonium that accompanies attempting levels individually and discovering through gameplay that the only way to succeed is to work together.&lt;/p&gt;

&lt;h2 id=&quot;built-with&quot;&gt;Built With&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Unity Enginer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version: &lt;a href=&quot;https://unity3d.com/unity/beta/2019.3.0b3&quot;&gt;2019.3.0 Beta 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Alex Thomas&lt;/strong&gt; - &lt;a href=&quot;https://github.com/athom031&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jose Garcia&lt;/strong&gt; - &lt;a href=&quot;https://github.com/LadyEbony&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Siqi Tian&lt;/strong&gt; - &lt;a href=&quot;https://github.com/SiqiT&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Max McKee&lt;/strong&gt; - &lt;a href=&quot;https://github.com/mmckee003&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chong Zuo&lt;/strong&gt; - &lt;a href=&quot;https://github.com/ChongZuo&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;game-description&quot;&gt;Game Description&lt;/h2&gt;

&lt;h3 id=&quot;level-components&quot;&gt;Level Components&lt;/h3&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/plates.png&quot; width=&quot;50%&quot; /&gt; &lt;br /&gt;
Cutting boards are where players can prepare specific ingredients for specific recipes. &lt;br /&gt;And the plates are what meals are served on.
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/trashcan.png&quot; width=&quot;30%&quot; /&gt; &lt;br /&gt;
Cabinets with an exclamation point over it serve as garbage cans. Putting anything on these cabinets will kill the object, allowing you to clean up your kitchen before it gets too much in disarray.
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/cookingpot.png&quot; width=&quot;40%&quot; /&gt; &lt;br /&gt;
Stove tops allow our chefs to cook the needed ingredients to complete their recipes. Keeping ingredients too long will cause the food to become charred and no longer servable, so watch your food!
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/ingredients.png&quot; width=&quot;40%&quot; /&gt; &lt;br /&gt;
Ingredients are available in this design on top of item spawning cabinets. There is no limit to how many ingredients can be spawned. Try not to drown in fish!
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/timer.png&quot; width=&quot;30%&quot; /&gt; &lt;br /&gt;
A timer is available on every level to show how much time is left to complete recipes. This is independent of what recipe tasks are being given to the player and instead is dependent on the level itself. Completing the required number of recipes in the level time serves as beating the level.
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/recipes.png&quot; width=&quot;40%&quot; /&gt; &lt;br /&gt;
In the top left corner all of the tasks are located for the players with its specific recipe. Plating and delivering a meal will delete the task and update your score in the bottom left corner.
&lt;br /&gt;&lt;br /&gt;

&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/delivery.png&quot; width=&quot;40%&quot; /&gt; &lt;br /&gt;
These special cabinets are where we can deliver play-created meals. Once plated food is put on these cabinets, they are checked to see if the recipe has been met and then the score is incremented.
&lt;br /&gt;&lt;br /&gt;

&lt;/div&gt;

&lt;h3 id=&quot;levels&quot;&gt;Levels&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/level1.png&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-1&quot;&gt;Level 1&lt;/h4&gt;
&lt;p&gt;In our first level we stress the importance of working together right off the bat. Players spawn in one of the two areas. If you are in the top section, you are only able to spawn and cut ingredients. These prepared ingredients can be put on the middle island section to be picked up by players in the bottom section. If you are in the bottom section, you can get the prepared ingredients, cook and plate them accordingly. The delivery of recipes are in the bottom section as well.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/level2.png&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-2&quot;&gt;Level 2&lt;/h4&gt;
&lt;p&gt;In our second level we open tasks up to the players’ discretion. Through the small window in the cabinets, players can switch sides. It is important to note that ingredients are on top and the cutting board is on the bottom. This level involves a lot of transferring ingredients back and forth to complete a recipe. So although now a player can individually complete recipes, working together will still allow the most efficient system.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/level3.png&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-3&quot;&gt;Level 3&lt;/h4&gt;
&lt;p&gt;This level can prove to be the most frustrating without communication. Players can be clogged up in this claustrophobic environment and cannot rely on cabinet island transfers unlike before. The suggested gameplay for this level is to keep movement constant among teammates in a same circular direction. If players were to move clockwise, there will be no traffic congestion.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/level4.png&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;level-4&quot;&gt;Level 4&lt;/h4&gt;
&lt;p&gt;In the final level of the game, players must test their abilities learned in the previous labels. Players must move within the tight channel to get ingredients to the other side. The throw feature can be used to great effect in this level.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;characters&quot;&gt;Characters&lt;/h3&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/player.png&quot; width=&quot;30%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
When the game starts, each user is assigned the same character model. Depending on the order they connect to the server, their model will be a different color. There is no ability or task difference in the player model. Users can move their characters around and grab/drop an item. Users can also throw an item to other users in order to save more time.&lt;/p&gt;

&lt;h3 id=&quot;gameplay&quot;&gt;Gameplay&lt;/h3&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/Files/KrazyKitchen/controls.png&quot; width=&quot;70%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
After all the players join the game, the game starts. Players have to cook meals based on the recipe to get corresponding points. &lt;br /&gt;
Users can use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;W, A, S, D to control the character&lt;/li&gt;
  &lt;li&gt;E to grab and drop items&lt;/li&gt;
  &lt;li&gt;F to throw items.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Game Engine&lt;/strong&gt; - Unity&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Version: &lt;a href=&quot;https://unity3d.com/unity/beta/2019.3.0b3&quot;&gt;2019.3.0 Beta 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Networking Framework&lt;/strong&gt; - Photon&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.photonengine.com/pun&quot;&gt;Photon&lt;/a&gt; &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Necessary Scripts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.EntityManager.html&quot;&gt;UnitEntityManager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/540/Documentation/ScriptReference/UI.Selectable-interactable.html&quot;&gt;Interactable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/app/448510/Overcooked/&quot;&gt;Overcooked&lt;/a&gt;- chaotic couch co-op cooking game&lt;/p&gt;</content><author><name></name></author><summary type="html">UCR Senior Design Project</summary></entry><entry><title type="html">Artificial Intelligence: CS 170 Class Projects</title><link href="http://localhost:4000/2020/06/10/Artificial-Intelligence.html" rel="alternate" type="text/html" title="Artificial Intelligence: CS 170 Class Projects" /><published>2020-06-10T00:00:00-07:00</published><updated>2020-06-10T00:00:00-07:00</updated><id>http://localhost:4000/2020/06/10/Artificial-Intelligence</id><content type="html" xml:base="http://localhost:4000/2020/06/10/Artificial-Intelligence.html">&lt;p&gt;A collection of projects completed in &lt;em&gt;CS170 - Artificial Intelligence&lt;/em&gt; exploring fundamentals of AI. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Search&lt;/em&gt;: The process of traversing from a start state to a goal state through a set of intermediate states. &lt;br /&gt;
&lt;em&gt;Machine Learning&lt;/em&gt;: An application that provides a system with the ability to “learn” from previous data. &lt;br /&gt;
&lt;em&gt;Logic Systems&lt;/em&gt;: The ability to take previous data and rules and then manipulate them to create new facts.&lt;/p&gt;

&lt;!--                    TABLE OF CONTENTS                                   --&gt;
&lt;h3 id=&quot;project-table-of-contents&quot;&gt;Project Table of Contents&lt;/h3&gt;
&lt;div style=&quot;display:flex; flex-direction:column;&quot;&gt;
    &lt;html&gt;
        &lt;a href=&quot;#puzzle&quot;&gt;Search: 8 Puzzle Solver&lt;/a&gt;
        &lt;a href=&quot;#feature&quot;&gt;Machine Learning: Nearest Neighbor Feature Selection&lt;/a&gt;
        &lt;a href=&quot;#arya&quot;&gt;Logic Systems: Arya the ChatBot&lt;/a&gt;
    &lt;/html&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--                          PROJECTS                                      --&gt;

&lt;div id=&quot;puzzle&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;search-8-puzzle-solver&quot;&gt;Search: 8 Puzzle Solver&lt;/h2&gt;

&lt;h4 id=&quot;puzzle-solver-repo&quot;&gt;&lt;a href=&quot;https://github.com/athom031/Artificial_Intelligence/tree/master/8-Puzzle-Solver&quot;&gt;Puzzle Solver Repo&lt;/a&gt;&lt;/h4&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/Files/ArtificialIntelligence/nodeAnalysis.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;
&lt;p&gt;A python implementation of a search solution to the 8 puzzle &lt;a href=&quot;https://blog.goodaudience.com/solving-8-puzzle-using-a-algorithm-7b509c331288&quot;&gt;problem&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Three methods are used to show the merit of A* search and within that, the importance of a good heuristic.&lt;br /&gt;
Uniform Cost Search only depends on the movement cost to determine the next move.&lt;br /&gt;
A* Search uses the movement cost to determine the next move but adding to that includes a heuristic function to determine the best next step. The A* search used, depends on two different heuristics.&lt;br /&gt;
&lt;em&gt;Misplaced Tile&lt;/em&gt; checks how many tiles are where they shouldn’t be. &lt;br /&gt;
&lt;em&gt;Manhattan Distance&lt;/em&gt; checks how far each tile is from where it should be. &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reflection&quot;&gt;Reflection&lt;/h3&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/Files/ArtificialIntelligence/runtime.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We can see building upon the movement cost to predict the next best step, reduces the runtime and space complexity exponentially. The heuristic chosen also matters. I was surprised that the misplaced tile performed better for this example than the Manhattan distance because from theory, the Manhattan distance uses more information about the actual state. But they are very similar and might vary for other examples.&lt;/p&gt;

&lt;div id=&quot;feature&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;machine-learning-nearest-neighbor-feature-selection&quot;&gt;Machine Learning: Nearest Neighbor Feature Selection&lt;/h2&gt;

&lt;h4 id=&quot;feature-selection-repo&quot;&gt;&lt;a href=&quot;https://github.com/athom031/Artificial_Intelligence/tree/master/FeatureSelectionNN&quot;&gt;Feature Selection Repo&lt;/a&gt;&lt;/h4&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/Files/ArtificialIntelligence/80_features_3_5.png&quot; width=&quot;75%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract-1&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Given a feature set with N classified instances and M features, we want to find the feature subset that will best represent the dataset for future unclassified instances. This uses the Nearest Neighbor Classifier and One Out algorithm to measure each potential feature subset.&lt;/p&gt;
&lt;h5 id=&quot;one-out-algorithm&quot;&gt;One Out Algorithm:&lt;/h5&gt;
&lt;p&gt;Take one data point out and build a Nearest Neighbor classifier from the current feature subset. Then use this classifier to guess the one out point. We do this for every point to determine the accuracy of our current feature subset.&lt;/p&gt;
&lt;h5 id=&quot;feature-selection&quot;&gt;Feature Selection:&lt;/h5&gt;
&lt;p&gt;We select features one of two ways, either we start with no features (forward selection) or all features (backward selection). Then we simply greedily narrow it down to the most accurate subset of features (remember we evaluate accuracy with the one out algorithm.&lt;/p&gt;

&lt;h3 id=&quot;warnings&quot;&gt;Warnings&lt;/h3&gt;

&lt;p&gt;Though foward selection and backward selection will result in similar accurate feature subset, these subsets will not always be the same. &lt;br /&gt;
Forward selection will replicate the accuracy of backward selection with less features. &lt;br /&gt;
This makes the features picked by Backwards Selection harder to pick. &lt;br /&gt;
Backwards Selection also takes more time on larger datasets. &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/Artificial_Intelligence/tree/master/FeatureSelectionNN/feature_accuracy_example&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;arya&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;logic-systems-arya-the-chatbot&quot;&gt;Logic Systems: Arya the ChatBot&lt;/h2&gt;

&lt;h4 id=&quot;arya-chatbot-repo&quot;&gt;&lt;a href=&quot;https://github.com/athom031/Artificial_Intelligence/tree/master/AryaBot&quot;&gt;Arya ChatBot Repo&lt;/a&gt;&lt;/h4&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/Files/ArtificialIntelligence/aryaWanderer.jpg&quot; width=&quot;75%&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Arya is a chat bot that represents her learned personality (‘negative’, ‘neutral’, or ‘positive’) with a score and responds occordingly. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/ArtificialIntelligence/aryaSoccer.png&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Each line, her personality ‘score’ is at a positive, netural, and negative level accordingly. Though the user input changes, Arya ‘feels’ like responding in a different way.&lt;/p&gt;

&lt;h3 id=&quot;abstract-2&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;This is a simple AI interface that responds to user entries based on the conversation and personality of the AI. If the user enters positive entries, the AI personality will slowly rise. But if the user starts sending negative messages, Arya’s personality will start to drop.&lt;/p&gt;

&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;AI is a complex field which is the reason for the Turing Test to exist. &lt;br /&gt;
Because of that there are limitations on Arya.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arya’s vocabulary is off a database of words and this is character specific, therefore capitalization does change understanding&lt;/li&gt;
  &lt;li&gt;Some phrases will simply not be understood because of the limits of the words understood by Arya.&lt;/li&gt;
  &lt;li&gt;Because of this can crash and just not respond on some user input.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;user-input-examples&quot;&gt;User Input Examples&lt;/h3&gt;

&lt;p&gt;Some output stays the same no matter the personality:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“What time is it?” will return standard time of clock &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other output will change based on how Arya feels:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“Who am I?”&lt;/li&gt;
  &lt;li&gt;“Who are you?”&lt;/li&gt;
  &lt;li&gt;“I am good at &lt;em&gt;insert noun&lt;/em&gt;” &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Input will affect Arya’s personality beyond setting it manually:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“You are a &lt;em&gt;insert adj&lt;/em&gt;”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inpsiration&quot;&gt;Inpsiration&lt;/h3&gt;

&lt;p&gt;Input parser and output creating inspired by Liza Daly’s python &lt;a href=&quot;https://github.com/lizadaly/brobot&quot;&gt;chat bot&lt;/a&gt; fundamentals example.&lt;/p&gt;</content><author><name></name></author><summary type="html">A collection of projects completed in CS170 - Artificial Intelligence exploring fundamentals of AI.</summary></entry><entry><title type="html">Embedded Systems: CS 120B Class Projects</title><link href="http://localhost:4000/2020/06/08/Embedded-Systems.html" rel="alternate" type="text/html" title="Embedded Systems: CS 120B Class Projects" /><published>2020-06-08T00:00:00-07:00</published><updated>2020-06-08T00:00:00-07:00</updated><id>http://localhost:4000/2020/06/08/Embedded-Systems</id><content type="html" xml:base="http://localhost:4000/2020/06/08/Embedded-Systems.html">&lt;h1 id=&quot;embedded-systems&quot;&gt;Embedded Systems&lt;/h1&gt;

&lt;p&gt;A collection of projects completed in CS120B - Embedded Systems &lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;ucr-spring-2020&quot;&gt;(UCR Spring 2020).&lt;/h5&gt;

&lt;h3 id=&quot;github-repo&quot;&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems&quot;&gt;Github Repo&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&quot;projects&quot;&gt;Projects&lt;/h2&gt;

&lt;!--                           PROJECTS                                      --&gt;
&lt;div id=&quot;lcd&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;final-project-lcd-racer&quot;&gt;Final Project: LCD Racer&lt;/h3&gt;

&lt;h4 id=&quot;lcd-racing-game-&quot;&gt;LCD racing game. &lt;br /&gt;&lt;/h4&gt;

&lt;p&gt;Help player Smee (&amp;gt;) avoid the obstacles (#). The obstacles increase over time and give an even larger challenge to Smee.
&lt;br /&gt;
Try and beat your high score!&lt;/p&gt;

&lt;h4 id=&quot;demo-&quot;&gt;&lt;a href=&quot;https://youtu.be/kZFsC9rSBdo&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/tree/master/projects/source/LCDRacer&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab11&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;task-scheduler&quot;&gt;Task Scheduler&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Highlight: &lt;/i&gt; Legen… wait for it &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Concurrent syncSM that scrolls through text to display the string “Legen … wait for it … DARY!!”, which is too big to fit on the LCD screen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/onJCacxnShQ&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/blob/master/projects/source/Lab11/athom031_lab11_part2.c&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab9&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;pulse-width-modulation-pwm&quot;&gt;Pulse Width Modulation (PWM)&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Highlight: &lt;/i&gt; Music Player &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A SM that uses PWM functionality to scale through the C scale and play the Kal Ho Naa Ho theme song (Bollywood song).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/0He5l6V-2h0&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/blob/master/projects/source/Lab9/athom031_lab9_part3.c&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab8&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;analog-to-digital-converter-adc&quot;&gt;Analog to Digital Converter (ADC)&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Highlight: &lt;/i&gt; Light Sensor &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is a system connected to a photo resistor. Based on the light, output the level on a bank of eight LEDs as a representation of the light level.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/WifXfBjOIZE&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/blob/master/projects/source/Lab8/athom031_lab8_part4.c&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab6&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;synchsms&quot;&gt;synchSMs&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Highlight: &lt;/i&gt; Catch the Light &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A simple light game where an array of LEDs cycles up and down. The task of the player is to try and press the button when the middle light is on. Each time the player succeeds, score is incremented on an LED screen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/7MUxzIRRO7U&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/blob/master/projects/source/Lab6/athom031_lab6_part2.c&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab5&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;atmega1284-microcontroller-intro&quot;&gt;ATMega1284 Microcontroller Intro&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Highlight: &lt;/i&gt; Fuel Level &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Input is connected to fuel tank gas level (numeric), so that we can output LED sequence that signifies what fuel level is. Additional light sequence for when levels dip low as a warning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/xjrFZ647MQU&quot;&gt;Demo&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/blob/master/projects/source/Lab5/athom031_lab5_part1.c&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab4&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;state-machines&quot;&gt;State Machines&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Highlight: &lt;/i&gt; Digital Combination Deadbolt &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A digital combination deadbolt that takes input and authorizes entrance to the garage doorway. Entering the combination again will lock the doorway.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/blob/master/projects/source/Lab4/athom031_lab4_part5.c&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab3&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;bit-manipulation&quot;&gt;Bit Manipulation&lt;/h3&gt;
&lt;p&gt;&lt;i&gt;Highlight: &lt;/i&gt; Airbag Light &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The input includes the weight sensor in the driver’s seat. Based on this, signify whether or not the airbag is abled.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/blob/master/projects/source/Lab3/athom031_lab3_part5.c&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;lab2&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;avr-toolchain-intro&quot;&gt;AVR Toolchain Intro&lt;/h3&gt;
&lt;p&gt;&lt;i&gt;Highlight: &lt;/i&gt; Weight Sensor &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Weight sensor for amusement park ride that insures the weight is balanced across three seats and meets certain restrictions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/EmbeddedSystems/blob/master/projects/source/Lab2/athom031_lab2_part4.c&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Embedded Systems</summary></entry><entry><title type="html">Audio Signal Processing: Intern Projects</title><link href="http://localhost:4000/2019/09/03/Audio-Signal-Processing.html" rel="alternate" type="text/html" title="Audio Signal Processing: Intern Projects" /><published>2019-09-03T00:00:00-07:00</published><updated>2019-09-03T00:00:00-07:00</updated><id>http://localhost:4000/2019/09/03/Audio-Signal-Processing</id><content type="html" xml:base="http://localhost:4000/2019/09/03/Audio-Signal-Processing.html">&lt;p&gt;An exploration of the audio space inspired by the knowledge gained and experience from my Internship with Knowles Intelligent Audio.&lt;/p&gt;

&lt;h2 id=&quot;split-script&quot;&gt;Split Script&lt;/h2&gt;

&lt;p&gt;Voice to command technology has become ever more present in today’s devices. To test this technology, keyword utterances are required.&lt;/p&gt;

&lt;p&gt;In my Knowles Data Collection project I organized for 30 subjects to come into the lab and record 10 instances of 9 different keywords.&lt;/p&gt;

&lt;p&gt;(A key word example: “Hey Siri, what’s the weather like today”.)&lt;/p&gt;

&lt;p&gt;This audio is saved as the total file but each utterance is required to be split and saved in the proper database collection. This base split script is used to take in an audio file and find the utterances. Later naming conventions and ordering was used to determine which keyword it is and where to send it in the database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/AudioSignal/SplitScript.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I saw an opportunity to optimize company scripts and made my own script which had a speedup due to cancelling redundant calculations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/InternAudioScripts/SplitScript&quot;&gt;Project Repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;audio-cutter&quot;&gt;Audio Cutter&lt;/h2&gt;

&lt;p&gt;During my internship this became a small passion project.
Often times in music I enjoy, there are annoying segments whether it be instrumental or a undesired verse that irks the music listening process.&lt;/p&gt;

&lt;p&gt;Trimming off the beginning and ending of a song is easy on iTunes but to cut out a middle section of a song causes a lot more hardship. Instead of opening up GarageBand and hand trimming the audio, concatenating them, and then exporting the audio, this python desktop application does it for you based on timestamps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/AudioSignal/AudioCutter.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/InternAudioScripts/AudioCutter&quot;&gt;Project Repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;trim-silence&quot;&gt;Trim Silence&lt;/h2&gt;

&lt;p&gt;After my internship I wondered how I could apply the split script methodologies to my life.
Being a person passionate about collecting music, I found that a lot of audio have different levels and that downloaded music has awkward dips and pauses from the song.&lt;/p&gt;

&lt;p&gt;This script trims off silence automatically and chooses which “utterance” to export based on length.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/AudioSignal/TrimSilence.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/athom031/InternAudioScripts/TrimSilence&quot;&gt;Project Repo&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">An exploration of the audio space inspired by the knowledge gained and experience from my Internship with Knowles Intelligent Audio.</summary></entry><entry><title type="html">Box Bot: UCR Hackathon Submission</title><link href="http://localhost:4000/2017/11/12/Bluetooth-RC.html" rel="alternate" type="text/html" title="Box Bot: UCR Hackathon Submission" /><published>2017-11-12T00:00:00-08:00</published><updated>2017-11-12T00:00:00-08:00</updated><id>http://localhost:4000/2017/11/12/Bluetooth-RC</id><content type="html" xml:base="http://localhost:4000/2017/11/12/Bluetooth-RC.html">&lt;h3 id=&quot;bluetooth-remote-controlled-car&quot;&gt;Bluetooth Remote Controlled Car&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/BoxBot/BoxBot.JPG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My team consisted of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Melissa Do&lt;/li&gt;
  &lt;li&gt;Emma Rivera&lt;/li&gt;
  &lt;li&gt;Cindy Quach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We used the Arduino IDE to build a motorized car that was controlled by personal Android application.&lt;/p&gt;

&lt;p&gt;From this project, we learned how to program using the Arduino IDE, build simple circuits, the difference between digital and analog signals, and how to solder wires onto our LED lights.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devpost.com/software/box-bot&quot;&gt;Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Files/BoxBot/Award.JPG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other than Melissa, the rest of the team had never been to a Hackathon before nor had prior experience with working with hardware. So we approached this opportunity with the goal of learning how to step out of our comfort zones and into the engineering world. Considering our experience with hardware, we achieved something great by being awarded the Best Hardware Hack!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;img src=&quot;http://localhost:4000/assets/Files/BoxBot/BoxBot.gif&quot; /&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Bluetooth Remote Controlled Car</summary></entry></feed>
